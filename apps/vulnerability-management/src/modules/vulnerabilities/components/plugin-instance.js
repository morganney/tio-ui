import React from 'react';
import PropTypes from 'prop-types';
import {
    PlanePreviewActionBar,
    PlanePreviewHeader,
    PlanePreviewHeaderView,
    PlanePreviewItem
} from '@hivekit/plane';
import { Text } from '@hivekit/text';

import { Utils } from 'tio-alloy';
import { SeverityIcon } from 'tio-vm/modules/common/components/presentations';
import {
    PluginActionsView,
    PluginAttachmentsView,
    PluginInstanceAttributesView
} from 'tio-vm/modules/vulnerabilities/components/presentations';
import {
    PluginInfoContainer
} from 'tio-vm/modules/vulnerabilities/components/containers';

const { dateFormat, dateDiffInDays, dateFormatStrings } = Utils;

export const PluginInstanceComponent = (props) => {
    // TODO unnest this object to clean up this code
    const { DATE_FORMAT_WITHTIME } = dateFormatStrings;
    let pluginName = '';
    let pluginId = '';
    let pluginLastSeen = '';
    let instanceAge = '';

    const renderHeader = (pluginInfoProps) => {
        pluginId = pluginInfoProps.pluginId;
        pluginName = pluginInfoProps.pluginInfo.plugin_details
            ? pluginInfoProps.pluginInfo.plugin_details.name
            : '';
        // TODO: replace with instance first seen and last seen
        pluginLastSeen = pluginInfoProps.pluginInfo.discovery
            ? dateFormat(pluginInfoProps.pluginInfo.discovery.seen_last, DATE_FORMAT_WITHTIME)
            : '';
        instanceAge = pluginInfoProps.pluginInfo.discovery
            ? dateDiffInDays(pluginInfoProps.pluginInfo.discovery.seen_first)
            : '';

        return (
            <React.Fragment>
                <PlanePreviewItem>
                    <PlanePreviewHeader
                        iconComponent={<SeverityIcon severity={pluginInfoProps.pluginInfo.severity} />}
                        contentComponent={<PlanePreviewHeaderView title={pluginName} />} />
                </PlanePreviewItem>
                <PlanePreviewActionBar
                    actions={<PluginActionsView data={pluginInfoProps.pluginInfo} id={pluginId} />} />
            </React.Fragment>
        );
    };

    const renderOutput = (pluginInfoProps) => {
        const { currentInstance } = pluginInfoProps;
        // TEMP just to look nice til we get a consistent component for this
        const tempStyles = {
            fontFamily: 'Courier',
            background: '#eee',
            borderRadius: 5,
            marginTop: 16,
            padding: 8,
            overflow: 'hidden'
        };

        // TODO intl
        const pluginOutput = currentInstance.uuid
            ? currentInstance.pluginOutput || '\nNo Output.'
            : '';

        return (
            <React.Fragment>
                <div>
                    <Text size={1} style={tempStyles}>
                        {pluginOutput}
                    </Text>
                </div>
                <PluginAttachmentsView attachments={currentInstance.attachments} />
                <PluginInstanceAttributesView
                    instance={ {
                        ...currentInstance,
                        pluginName,
                        pluginId,
                        pluginLastSeen,
                        instanceAge } }
                    isViewByPlugin />
            </React.Fragment>
        );
    };

    const renderPluginInstance = (pluginInfoProps) => {
        return (
            <React.Fragment>
                {renderHeader(pluginInfoProps)}
                {renderOutput(pluginInfoProps)}
            </React.Fragment>
        );
    };

    return <PluginInfoContainer {...props} tioRender={renderPluginInstance} />;
};
PluginInstanceComponent.propTypes = {
    pluginId: PropTypes.string.isRequired,
    instanceId: PropTypes.string.isRequired
};
