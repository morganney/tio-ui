import React from 'react';
import PropTypes from 'prop-types';
import { FormattedMessage, injectIntl } from 'react-intl';
import {
    PlanePreviewAttr,
    PlanePreviewAttrItem
} from '@hivekit/plane';
import { ContentBox } from '@hivekit/content-box';
import { Text } from '@hivekit/text';
import { H5 } from '@hivekit/header';

import { Utils } from 'tio-alloy';
import { messages } from 'tio-vm/modules/vulnerabilities/messages';
import { commonMessages } from 'tio-vm/modules/common/messages';
import { PluginRiskInformationView } from 'tio-vm/modules/vulnerabilities/components/presentations';

const { dateFormat, dateFormatStrings } = Utils;
const {
    vulnerabilityInformation,
    vulnPublished,
    patchPublished,
    cpe,
    none
} = messages;
const {
    exploitability
} = commonMessages;

// temp styles
const overflowStyle = {
    overflow: 'hidden',
    cursor: 'default',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
};

const PluginAttributes = ({
    intl,
    vulnerability_information: vulnInfo,
    pluginInfoRiskExposure
}) => {
    const {
        vulnerability_publication_date: vulnPublicationDate,
        patch_publication_date: patchPublicationDate,
        cpe: cpeInfo
    } = vulnInfo || {};
    const { DATE_FORMAT_WITHTIME } = dateFormatStrings;
    const longCpe = 5;
    const longCpeInfo = Boolean(cpeInfo && cpeInfo.length > longCpe);

    return (
        <div>
            <H5>
                <FormattedMessage {...vulnerabilityInformation} />
            </H5>
            <PlanePreviewAttr content={
                <React.Fragment>
                    <PlanePreviewAttrItem label={intl.formatMessage(vulnPublished)}>
                        <Text size={1}>
                            { vulnPublicationDate
                                ? dateFormat(vulnPublicationDate, DATE_FORMAT_WITHTIME)
                                : <FormattedMessage {...none} />
                            }
                        </Text>
                    </PlanePreviewAttrItem>
                    <PlanePreviewAttrItem label={intl.formatMessage(patchPublished)}>
                        <Text size={1}>
                            { patchPublicationDate
                                ? dateFormat(patchPublicationDate, DATE_FORMAT_WITHTIME)
                                : <FormattedMessage {...none} />
                            }
                        </Text>
                    </PlanePreviewAttrItem>
                    <PlanePreviewAttrItem label={intl.formatMessage(cpe)} >
                        <ContentBox height='95px' size={1} expandable={longCpeInfo}>
                            { cpeInfo
                                ? cpeInfo.map((cpei) => {
                                    return (
                                        <div key={cpei} data-tip={cpei}>
                                            <Text size={1} style={overflowStyle}>
                                                {cpei}
                                            </Text>
                                        </div>
                                    );
                                })
                                : <FormattedMessage {...none} />
                            }
                        </ContentBox>
                    </PlanePreviewAttrItem>
                    <PlanePreviewAttrItem label={intl.formatMessage(exploitability)} >
                        { (pluginInfoRiskExposure && pluginInfoRiskExposure.length > 0)
                            ? <PluginRiskInformationView pluginInfoRiskExposure={pluginInfoRiskExposure} />
                            : <FormattedMessage {...none} />
                        }
                    </PlanePreviewAttrItem>
                </React.Fragment>
            } />
        </div>
    );
};
PluginAttributes.propTypes = {
    intl: PropTypes.object,
    vulnerability_information: PropTypes.object,
    pluginInfoRiskExposure: PropTypes.array
};

export const PluginAttributesView = injectIntl(PluginAttributes);
