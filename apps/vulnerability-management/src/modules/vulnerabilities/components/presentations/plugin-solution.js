import React from 'react';
import { FormattedMessage, injectIntl } from 'react-intl';
import PropTypes from 'prop-types';
import { spacing } from '@hivekit/core';
import { PlanePreviewItem } from '@hivekit/plane';
import { ContentBox } from '@hivekit/content-box';
import { Link } from '@hivekit/link';
import { H5 } from '@hivekit/header';
import { Text } from '@hivekit/text';

import { messages } from 'tio-vm/modules/vulnerabilities/messages';

// temp styles
const overflowStyle = {
    overflow: 'hidden',
    cursor: 'default',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
};

// TEMP
const headerPadding = {
    style: { marginBottom: spacing[2] }
};

class PluginSolution extends React.Component {
    static propTypes = {
        solution: PropTypes.string,
        see_also: PropTypes.array,
        intl: PropTypes.object
    }

    renderLink (link, index) {
        return (
            <Link display='block' target='_blank' key={index} to={link}>
                {link}
            </Link>
        );
    }

    render () {
        const { intl, see_also: seeAlso, solution } = this.props;
        const { solution: solutionMsg, seeAlso: seeAlsoMsg } = messages;
        const longSolutionLength = 100;
        const longSolution = Boolean(solution && solution.length > longSolutionLength);
        const longSeeAlsoLength = 3;
        const longSeeAlso = Boolean(seeAlso && seeAlso.length > longSeeAlsoLength);

        return (
            <PlanePreviewItem>
                <div {...headerPadding}>
                    <H5>
                        <FormattedMessage {...solutionMsg} />
                    </H5>
                </div>
                <div {...headerPadding}>
                    <ContentBox expandable={longSolution} size={1}>
                        <Text size={1}>
                            {solution || intl.formatMessage(messages.none)}
                        </Text>
                    </ContentBox>
                </div>

                <div {...headerPadding}>
                    <H5>
                        <FormattedMessage {...seeAlsoMsg} />
                    </H5>
                </div>
                <ContentBox expandable={longSeeAlso} size={1}>
                    <Text size={1} style={overflowStyle}>
                        { (seeAlso && seeAlso.length > 0)
                            ? seeAlso.map(this.renderLink)
                            : intl.formatMessage(messages.none)
                        }
                    </Text>
                </ContentBox>
            </PlanePreviewItem>
        );
    }
}

const PluginSolutionView = injectIntl(PluginSolution);

export { PluginSolutionView };
