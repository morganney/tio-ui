import React from 'react';
import PropTypes from 'prop-types';
import { injectIntl } from 'react-intl';
import { colors } from '@hivekit/core';
import { ContentBox } from '@hivekit/content-box';
import { Link } from '@hivekit/link';
import { Text } from '@hivekit/text';
import { VulnerabilitiesIcon } from '@hivekit/icon';

import { Utils } from 'tio-alloy';
import { commonMessages } from 'tio-vm/modules/common/messages';
import { SEVERITY_COLORS, SEVERITY_LABELS } from 'tio-vm/modules/common/constants';
import { messages as vulnMessages } from 'tio-vm/modules/vulnerabilities/messages';
import {
    SeverityIcon,
    LayoutPreviewView,
    LayoutPreviewHeaderWithDescriptionView
} from 'tio-vm/modules/common/components/presentations';
import {
    PluginActionsView,
    PluginRiskInformationView
} from 'tio-vm/modules/vulnerabilities/components/presentations';

const { dateFormat, dateFormatStrings: { DATE_FORMAT_WITHTIME } } = Utils;
const {
    vulnerabilityInformation,
    vulnPublished,
    patchPublished,
    cpe,
    solution,
    none,
    seeAlso
} = vulnMessages;
const {
    exploitability,
    vulnerabilities
} = commonMessages;

// TODO: move these content componets to a common location
const ContentBoxText = (props) => {
    const { intl, size, content, ...restProps } = props;

    return (
        <ContentBox {...restProps} size={size}>
            {
                (content && content !== '')
                    ? content
                    : intl.formatMessage(none)
            }
        </ContentBox>
    );
};
ContentBoxText.propTypes = {
    intl: PropTypes.object.isRequired,
    size: PropTypes.number,
    content: PropTypes.oneOfType([PropTypes.string, PropTypes.node])
};
const ContentBoxTextView = injectIntl(ContentBoxText);

const ListLinks = ({ intl, links, size }) => {
    return (!links || links.length === 0)
        ? <Text size={size || 1} >{intl.formatMessage(none)}</Text>
        : links.map((link, index) => {
            return <Link size={size || 1} display='block' target='_blank' key={index} to={link}>{link}</Link>;
        });
};
ListLinks.propTypes = {
    intl: PropTypes.object.isRequired,
    links: PropTypes.array,
    size: PropTypes.number
};
const ListLinksView = injectIntl(ListLinks);

const ListTexts = ({ intl, texts, size }) => {
    return !texts
        ? <Text size={size || 1} >{intl.formatMessage(none)}</Text>
        : texts.map((text, index) => {
            return <Text key={index} size={size || 1}>{text}</Text>;
        });
};
ListTexts.propTypes = {
    intl: PropTypes.object.isRequired,
    texts: PropTypes.array,
    size: PropTypes.number
};
const ListTextsView = injectIntl(ListTexts);

const getPluginPreviewHeader = (pluginId, pluginName, pluginInfo) => {
    return {
        badge: {
            color: SEVERITY_COLORS[pluginInfo.severity],
            label: `${SEVERITY_LABELS[pluginInfo.severity]}`.toUpperCase()
        },
        icon: <SeverityIcon size={3} severity={pluginInfo.severity} />,
        title: <LayoutPreviewHeaderWithDescriptionView
            title={pluginName}
            description={pluginInfo.description}
            subtitle={`PLUGIN ID: ${pluginId}`} />
    };
};
const getPluginGraphics = (intl, pluginInfo, onShowDetails) => {
    return [
        {
            title: intl.formatMessage(vulnerabilities),
            color: SEVERITY_COLORS[pluginInfo.severity] || colors.gray,
            Icon: VulnerabilitiesIcon,
            value: pluginInfo.count,
            width: 1,
            action: onShowDetails
        }
    ];
};
const getPluginPreviewAttributes = (intl, pluginInfo, pluginInfoRiskExposure) => {
    return [
        {
            title: intl.formatMessage(vulnerabilityInformation),
            data: [
                {
                    title: intl.formatMessage(vulnPublished),
                    value: dateFormat(pluginInfo.vulnerability_publication_date, DATE_FORMAT_WITHTIME)
                },
                {
                    title: intl.formatMessage(patchPublished),
                    value: dateFormat(pluginInfo.patch_publication_date, DATE_FORMAT_WITHTIME)
                },
                {
                    title: intl.formatMessage(exploitability),
                    value: <PluginRiskInformationView pluginInfoRiskExposure={pluginInfoRiskExposure} />,
                    width: 1
                },
                {
                    title: intl.formatMessage(cpe),
                    value: <ListTextsView
                        texts={pluginInfo.vulnerability_information &&
                               pluginInfo.vulnerability_information.cpe} />,
                    width: 1
                }
            ]
        },
        {
            title: intl.formatMessage(solution),
            data: <ContentBoxTextView expandable size={1} content={pluginInfo.solution} />,
            width: 1
        },
        {
            title: intl.formatMessage(seeAlso),
            data: <ContentBoxTextView expandable size={1} content={<ListLinksView links={pluginInfo.see_also} />} />,
            width: 1
        }
    ];
};

// TODO intl - plugin id
export const PluginPreview = ({ intl, pluginId, pluginInfo, pluginInfoRiskExposure, onShowDetails }) => {
    const pluginName = pluginInfo.plugin_details
        ? pluginInfo.plugin_details.name
        : '';

    return (
        <LayoutPreviewView
            header={getPluginPreviewHeader(pluginId, pluginName, pluginInfo)}
            actions={<PluginActionsView data={{ pluginInfo, pluginId }} id={`${pluginInfo.plugin_id}_info`} />}
            graphics={getPluginGraphics(intl, pluginInfo, onShowDetails)}
            attributes={getPluginPreviewAttributes(intl, pluginInfo, pluginInfoRiskExposure)}
        />
    );
};
PluginPreview.displayName = 'PluginPreviewRewriteView';
PluginPreview.propTypes = {
    intl: PropTypes.object,
    pluginId: PropTypes.string,
    pluginInfo: PropTypes.object.isRequired,
    pluginInfoRiskExposure: PropTypes.array.isRequired,
    onShowDetails: PropTypes.func.isRequired
};

export const PluginPreviewRewriteView = injectIntl(PluginPreview);
