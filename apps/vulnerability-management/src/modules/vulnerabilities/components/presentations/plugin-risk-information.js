import React from 'react';
import PropTypes from 'prop-types';
import {
    ExploitComplexityHighIcon,
    ExploitComplexityLowIcon,
    ExploitEasyIcon,
    ExploitFrameworkIcon,
    ExploitFunctionalIcon,
    ExploitLocalIcon,
    ExploitMalwareIcon,
    ExploitNewsIcon,
    ExploitProofOfConceptIcon,
    ExploitRemoteIcon
} from '@hivekit/icon';
import { Button } from '@hivekit/button';
import { Popover } from '@hivekit/popover';
import { Text } from '@hivekit/text';
import { FormattedMessage } from 'react-intl';

import { messages } from 'tio-vm/modules/vulnerabilities/messages';

// TODO use constants for these keys
// TODO map key => icon here
const getRiskIconWithDescription = (key) => {
    const {
        locallyExploitable,
        remotelyExploitable,
        inTheNews,
        exploitedByMalware,
        canvasExploitFramework,
        highComplexity,
        lowComplexity,
        easyToUse,
        functional,
        proofOfConcept
    } = messages;
    const iconMap = {
        isExploitedByMalware: {
            icon: ExploitMalwareIcon,
            message: exploitedByMalware
        },
        isRemotelyExploitable: {
            icon: ExploitRemoteIcon,
            message: remotelyExploitable
        },
        isLocallyExploitable: {
            icon: ExploitLocalIcon,
            message: locallyExploitable
        },
        isCanvasExploitFramework: {
            icon: ExploitFrameworkIcon,
            message: canvasExploitFramework
        },
        isHighAttackComplexity: {
            icon: ExploitComplexityHighIcon,
            message: highComplexity
        },
        isLowAttackComplexity: {
            icon: ExploitComplexityLowIcon,
            message: lowComplexity
        },
        isInTheNews: {
            icon: ExploitNewsIcon,
            message: inTheNews
        },
        isEasyToUse: {
            icon: ExploitEasyIcon,
            message: easyToUse
        },
        isFunctional: {
            icon: ExploitFunctionalIcon,
            message: functional
        },
        isProofOfConcept: {
            icon: ExploitProofOfConceptIcon,
            message: proofOfConcept
        }
    };

    return iconMap[key];
};
const getRiskIcon = (key) => {
    return getRiskIconWithDescription(key).icon;
};
const getRiskDescription = (key) => {
    return getRiskIconWithDescription(key).message;
};

const renderRiskPopover = (item) => {
    const { key } = item;

    return (
        <div key={key}>
            {renderRisk(item)}
            <Text display='inline' pl={1} size={1}>
                <FormattedMessage {...getRiskDescription(key)}/>
            </Text>
        </div>
    );
};
renderRiskPopover.propTypes = {
    item: PropTypes.object.isRequired
};

const renderRisk = ({ key }) => {
    const Icon = getRiskIcon(key);

    return <Icon key={key} size={0} />;
};
renderRisk.propTypes = {
    key: PropTypes.string.isRequired
};

export const PluginRiskInformationView = (props) => {
    const { pluginInfoRiskExposure } = props;

    return (
        <div>
            <Button data-popover='' data-for='hover-pluginInfoRiskExposure-id'>
                {pluginInfoRiskExposure && pluginInfoRiskExposure.map(renderRisk)}
            </Button>
            <Popover
                id='hover-pluginInfoRiskExposure-id'
                place='top'
                hover={true}>
                {
                    pluginInfoRiskExposure &&
                    pluginInfoRiskExposure.map(renderRiskPopover)
                }
            </Popover>
        </div>
    );
};
PluginRiskInformationView.propTypes = {
    pluginInfoRiskExposure: PropTypes.array.isRequired
};
