import React from 'react';
import PropTypes from 'prop-types';
import { Table } from '@hivekit/table';
import { StackedBarChart } from '@hivekit/bar-chart';

import { Utils } from 'tio-alloy';
import { assetIcon, assetIp, assetName, assetNameTip } from 'tio-vm/modules/assets/utils';
import { AssetTableActionsView } from 'tio-vm/modules/assets/components/presentations';

const { dateFormat } = Utils;

const AssetIcon = (node) => {
    return assetIcon(node.data.system_type);
};

const SeverityBarChart = ({ value }) => {
    const severites = value.map((sev) => {
        return {
            count: sev.count,
            label: sev.name,
            severity: sev.name.toLowerCase()
        };
    });

    return <StackedBarChart data={severites} showLabels={false} />;
};
SeverityBarChart.propTypes = {
    value: PropTypes.array.isRequired
};

// TODO intl - columns
const checkboxColumn = {
    field: 'id'
};
const columns = [
    {
        headerName: 'name',
        field: 'agent_name&netbios_name&fqdn&ipv4&ipv6',
        width: 300,
        valueGetter: (params) => {
            return assetName(params.data);
        },
        cellTooltip: assetNameTip
    },
    {
        headerName: 'ip',
        field: 'ipv4',
        width: 130,
        valueGetter: (params) => {
            return assetIp(params.data);
        }
    },
    {
        headerName: 'vulnerabilities',
        field: 'severities',
        width: 520,
        cellStyle: { paddingTop: '16px' },
        customCellRenderer: SeverityBarChart
    },
    {
        headerName: 'count',
        field: 'total',
        width: 150,
        sort: 'desc'
    },
    {
        headerName: 'last seen',
        field: 'last_seen',
        width: 100,
        // valueFormatter does not work
        valueGetter: (params) => {
            return dateFormat(params.data.last_seen);
        }
    },
    {
        headerName: '',
        field: 'actions',
        width: 50,
        suppressSorting: true,
        customCellRenderer: AssetTableActionsView
    }
];

export const VulnAssetsTableView = ({ vulnAssets, vulnAssetsFetching, ...restProps }) => {
    return (
        <Table
            inheritHeight
            densityToggle={false}
            columns={columns}
            rows={vulnAssets}
            checkboxIconComponent={AssetIcon}
            checkboxProps={checkboxColumn}
            fetching={vulnAssetsFetching}
            {...restProps} />
    );
};
VulnAssetsTableView.propTypes = {
    vulnAssets: PropTypes.array.isRequired,
    vulnAssetsFetching: PropTypes.bool.isRequired
};
