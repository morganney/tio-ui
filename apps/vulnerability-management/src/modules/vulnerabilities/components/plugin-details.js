import React from 'react';
import PropTypes from 'prop-types';
import { withRouter } from 'react-router-dom';

import {
    AdvSearchView,
    LayoutSearchTableView
} from 'tio-vm/modules/common/components/presentations';
import {
    PluginInstancesContainer,
    SearchFiltersContainer
} from 'tio-vm/modules/vulnerabilities/components/containers';
import {
    PluginInstancesStatsComponent
} from 'tio-vm/modules/vulnerabilities/components';
import {
    PluginInstancesTableView
} from 'tio-vm/modules/vulnerabilities/components/presentations';

export class PluginDetails extends React.Component {
    static propTypes = {
        pluginId: PropTypes.string.isRequired,
        match: PropTypes.object.isRequired,
        history: PropTypes.object.isRequired
    };

    constructor () {
        super();
        this.onTableClick = this.onTableClick.bind(this);
        this.renderAdvancedSearch = this.renderAdvancedSearch.bind(this);
        this.renderDetails = this.renderDetails.bind(this);
    }

    onTableClick (node) {
        const { match, history } = this.props;

        history.push(`${match.url}/instance/${node.data.uuid}`);
    }

    renderAdvancedSearch (props) {
        const {
            pluginId,
            fetchPluginInstances,
            fetchPluginInstancesStats,
            pluginInstancesTotal = 0,
            filterRange,
            filters,
            filtersApplied,
            ...filterProps
        } = props;
        // TODO create fn(filters) and memoize
        const isValidInstanceFilter = (filter) => {
            return [
                'host.id',
                'host.target',
                'output',
                'port.port',
                'port.protocol',
                'modification',
                'severity',
                'tracking.first_found',
                'tracking.state'
            ].indexOf(filter.name) > -1;
        };
        const validInstanceFilters = filters.filter(isValidInstanceFilter);
        const validInstanceFiltersApplied = {
            ...filtersApplied,
            filters: filtersApplied.filters
                ? filtersApplied.filters.filter(isValidInstanceFilter)
                : []
        };

        // TODO intl - Vulnerabilities
        const searchPluginInstances = (pluginInstancefilters) => {
            fetchPluginInstances(pluginId, filterRange, pluginInstancefilters);
            fetchPluginInstancesStats(pluginId, filterRange, pluginInstancefilters);
        };

        return (
            <AdvSearchView
                {...filterProps}
                filtersApplied={validInstanceFiltersApplied}
                filters={validInstanceFilters}
                updateFiltersApplied={null}
                defaultField='host.target'
                recordCount={`${pluginInstancesTotal}`}
                recordLabel='Vulnerabilities'
                searchAction={searchPluginInstances} />
        );
    }

    renderDetails (instancesProps) {
        const { pluginId } = instancesProps;

        return (
            <React.Fragment>
                <PluginInstancesStatsComponent pluginId={pluginId}/>
                <LayoutSearchTableView headerHeight={103}
                    search={
                        <SearchFiltersContainer
                            {...instancesProps}
                            filterType='vulnerabilities'
                            tioRender={this.renderAdvancedSearch} />
                    }
                    table={
                        <PluginInstancesTableView
                            {...instancesProps}
                            onCellClicked={this.onTableClick} />
                    } />
            </React.Fragment>
        );
    }

    render () {
        return <PluginInstancesContainer tioRender={this.renderDetails} {...this.props} />;
    }
}

export const PluginDetailsComponent = withRouter(PluginDetails);
