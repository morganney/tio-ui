import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';

import { fetchVulnAssets, fetchVulnAssetsStats } from 'tio-vm/modules/vulnerabilities/actions';
import { STEM_NAME as COMMON_STEM_NAME } from 'tio-vm/modules/common/constants';
import { BRANCH_NAME, STEM_NAME } from 'tio-vm/modules/vulnerabilities/constants';

class VulnAssets extends React.Component {
    static propTypes = {
        // store
        filterRange: PropTypes.number.isRequired,
        vulnAssets: PropTypes.array.isRequired,
        vulnAssetsFetching: PropTypes.bool.isRequired,
        // functions
        fetchVulnAssets: PropTypes.func.isRequired,
        fetchVulnAssetsStats: PropTypes.func.isRequired,
        tioRender: PropTypes.func.isRequired
    };

    componentDidMount () {
        this.update();
    }

    componentDidUpdate (prevProps) {
        if (prevProps.filterRange !== this.props.filterRange) {
            this.update();
        }
    }

    update () {
        this.props.fetchVulnAssets(this.props.filterRange);
    }

    render () {
        return this.props.tioRender(this.props);
    }
}

const mapStateToProps = (state) => {
    const { filterRange } = state[BRANCH_NAME][COMMON_STEM_NAME];
    const {
        vulnAssets,
        vulnAssetsFetching
    } = state[BRANCH_NAME][STEM_NAME];

    return {
        filterRange,
        vulnAssets: vulnAssets.assets,
        vulnAssetsTotal: vulnAssets.total_asset_count,
        vulnAssetsFetching
    };
};
const mapDispatchToProps = {
    fetchVulnAssets,
    fetchVulnAssetsStats
};

export const VulnAssetsContainer = connect(mapStateToProps, mapDispatchToProps)(VulnAssets);
