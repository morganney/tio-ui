import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';

import {
    getFilterParams
} from 'tio-vm/modules/common/utils/adv-search';
import {
    fetchPlugins,
    fetchPluginStats,
    updateFiltersApplied
} from 'tio-vm/modules/vulnerabilities/actions';
import { STEM_NAME as COMMON_STEM_NAME } from 'tio-vm/modules/common/constants';
import { BRANCH_NAME, STEM_NAME } from 'tio-vm/modules/vulnerabilities/constants';

class Plugins extends React.Component {
    static propTypes = {
        // store
        plugins: PropTypes.array.isRequired,
        pluginsFetching: PropTypes.bool.isRequired,
        pluginsTotal: PropTypes.number.isRequired,
        filtersApplied: PropTypes.object.isRequired,
        filterRange: PropTypes.number.isRequired,
        // funcs
        fetchPlugins: PropTypes.func.isRequired,
        fetchPluginStats: PropTypes.func.isRequired,
        updateFiltersApplied: PropTypes.func.isRequired,
        // internal
        tioRender: PropTypes.func.isRequired
    };

    componentDidMount () {
        this.update();
    }

    componentDidUpdate (prevProps) {
        if (prevProps.filterRange !== this.props.filterRange) {
            this.update();
        }
    }

    update () {
        const { filterRange, filtersApplied } = this.props;

        this.props.fetchPlugins(filterRange, getFilterParams(filtersApplied));
    }

    render () {
        return this.props.tioRender(this.props);
    }
}

const mapStateToProps = (state) => {
    const { filterRange } = state[BRANCH_NAME][COMMON_STEM_NAME];
    const {
        plugins,
        pluginsFetching,
        filtersApplied
    } = state[BRANCH_NAME][STEM_NAME];

    return {
        plugins: plugins.vulnerabilities,
        pluginsFetching,
        pluginsTotal: plugins.total_vulnerability_count,
        filtersApplied,
        filterRange
    };
};
const mapDispatchToProps = {
    fetchPlugins,
    fetchPluginStats,
    updateFiltersApplied
};

export const PluginsContainer = connect(mapStateToProps, mapDispatchToProps)(Plugins);
