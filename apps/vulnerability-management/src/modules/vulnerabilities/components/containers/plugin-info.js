import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';

import { STEM_NAME as COMMON_STEM_NAME } from 'tio-vm/modules/common/constants';
import { BRANCH_NAME, STEM_NAME } from 'tio-vm/modules/vulnerabilities/constants';
import { fetchPluginInfo } from 'tio-vm/modules/vulnerabilities/actions';
import { getFilterParams } from 'tio-vm/modules/common/utils/adv-search';
import { selectPluginInfoRiskExposure } from 'tio-vm/modules/vulnerabilities/reducers/selectors/plugin-info-selectors';

class PluginInfo extends React.Component {
    static propTypes = {
        // props
        pluginId: PropTypes.string.isRequired,
        // store
        filterRange: PropTypes.number.isRequired,
        filtersApplied: PropTypes.object,
        pluginInfo: PropTypes.object.isRequired,
        pluginInfoFetching: PropTypes.bool.isRequired,
        pluginInfoRiskExposure: PropTypes.array.isRequired,
        // functions
        fetchPluginInfo: PropTypes.func.isRequired,
        tioRender: PropTypes.func.isRequired
    };

    componentDidMount () {
        this.update();
    }

    componentDidUpdate (prevProps) {
        if (prevProps.pluginId !== this.props.pluginId ||
            prevProps.filterRange !== this.props.filterRange) {
            this.update();
        }
    }

    update () {
        const { pluginId, filterRange, filtersApplied } = this.props;

        this.props.fetchPluginInfo(
            pluginId,
            filterRange,
            getFilterParams(filtersApplied)
        );
    }

    render () {
        return this.props.tioRender(this.props);
    }
}

const mapStateToProps = (state, ownProps) => {
    const { match: { params } } = ownProps;
    const { filterRange } = state[BRANCH_NAME][COMMON_STEM_NAME];
    const {
        filtersApplied,
        pluginInfo,
        pluginInfoFetching,
        pluginInstances
    } = state[BRANCH_NAME][STEM_NAME];
    const pluginInfoRiskExposure = selectPluginInfoRiskExposure(state);
    const currentInstance = pluginInstances.filter((inst) => {
        return inst.uuid === params.instanceid;
    });

    return {
        currentInstance: currentInstance[0] || {},
        filterRange,
        filtersApplied,
        pluginInfo,
        pluginInfoFetching,
        pluginInfoRiskExposure
    };
};
const mapDispatchToProps = {
    fetchPluginInfo
};

export const PluginInfoContainer =
    withRouter(connect(mapStateToProps, mapDispatchToProps)(PluginInfo));
