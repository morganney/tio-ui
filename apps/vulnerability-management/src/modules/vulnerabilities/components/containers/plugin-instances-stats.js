import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { injectIntl } from 'react-intl';

import { fetchPluginInstancesStats } from 'tio-vm/modules/vulnerabilities/actions';
import { STEM_NAME as COMMON_STEM_NAME } from 'tio-vm/modules/common/constants';
import { BRANCH_NAME, STEM_NAME } from 'tio-vm/modules/vulnerabilities/constants';
import { getFilterParams } from 'tio-vm/modules/common/utils/adv-search';

class PluginInstancesStats extends React.Component {
    static propTypes = {
        // store
        filterRange: PropTypes.number.isRequired,
        filtersApplied: PropTypes.object,
        pluginInstancesStats: PropTypes.array.isRequired,
        // functions
        fetchPluginInstancesStats: PropTypes.func.isRequired,
        tioRender: PropTypes.func.isRequired,
        // props
        pluginId: PropTypes.string.isRequired
    };

    componentDidMount () {
        this.update();
    }

    componentDidUpdate (prevProps) {
        if (prevProps.pluginId !== this.props.pluginId ||
            prevProps.filterRange !== this.props.filterRange) {
            this.update();
        }
    }

    update () {
        const { pluginId, filterRange, filtersApplied } = this.props;

        this.props.fetchPluginInstancesStats(pluginId, filterRange, getFilterParams(filtersApplied));
    }

    render () {
        return this.props.tioRender(this.props);
    }
}

const mapStateToProps = (state) => {
    const { filterRange } = state[BRANCH_NAME][COMMON_STEM_NAME];
    const {
        filtersApplied,
        pluginInstances,
        pluginInstancesStats
    } = state[BRANCH_NAME][STEM_NAME];

    return {
        filterRange,
        filtersApplied,
        pluginInstancesTotal: pluginInstances.length,
        pluginInstancesStats
    };
};
const mapDispatchToProps = {
    fetchPluginInstancesStats
};

export const PluginInstancesStatsContainer =
    injectIntl(connect(mapStateToProps, mapDispatchToProps)(PluginInstancesStats));
