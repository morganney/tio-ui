import React from 'react';
import PropTypes from 'prop-types';

import {
    AdvSearchView,
    LayoutSearchTableView
} from 'tio-vm/modules/common/components/presentations';
import {
    PluginsContainer,
    SearchFiltersContainer
} from 'tio-vm/modules/vulnerabilities/components/containers';
import {
    PluginsTableView
} from 'tio-vm/modules/vulnerabilities/components/presentations';

export class VulnPluginsComponent extends React.Component {
    static propTypes = {
        match: PropTypes.object.isRequired,
        history: PropTypes.object.isRequired
    };

    constructor () {
        super();
        this.onTableClick = this.onTableClick.bind(this);
        this.renderPlugins = this.renderPlugins.bind(this);
    }

    onTableClick (node) {
        const { match, history } = this.props;

        history.push(`${match.url}/${node.data.plugin_id}`);
    }

    renderAdvancedSearch ({
        fetchPlugins,
        fetchPluginStats,
        filtersApplied,
        pluginsTotal,
        filterRange,
        ...filterProps
    }) {
        // TODO intl - Vulnerabilities
        const searchVulnPlugins = (filters) => {
            fetchPlugins(filterRange, filters);
            fetchPluginStats(filterRange, filters);
        };

        return (
            <AdvSearchView
                {...filterProps}
                filtersApplied={filtersApplied}
                defaultField='plugin.name'
                recordCount={pluginsTotal.toString()}
                recordLabel='Vulnerabilities'
                searchAction={searchVulnPlugins} />
        );
    }

    renderPlugins (pluginsProps) {
        return (
            <LayoutSearchTableView
                search={
                    <SearchFiltersContainer
                        {...pluginsProps}
                        filterType='vulnerabilities'
                        tioRender={this.renderAdvancedSearch} />
                }
                table={
                    <PluginsTableView
                        {...pluginsProps}
                        onCellClicked={this.onTableClick} />
                } />
        );
    }

    render () {
        return <PluginsContainer tioRender={this.renderPlugins} {...this.props} />;
    }
}
