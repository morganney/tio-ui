import { createSelector } from 'reselect';

import { BRANCH_NAME, STEM_NAME } from 'tio-vm/modules/vulnerabilities/constants';
import {
    isRiskExploitedByMalware,
    isRiskRemotelyExploitable,
    isRiskLocallyExploitable,
    isRiskCanvasExploitFramework,
    isRiskHighAttackComplexity,
    isRiskLowAttackComplexity,
    isRiskInTheNews,
    isRiskEasyToUse,
    isRiskFunctional,
    isRiskProofOfConcept
} from 'tio-vm/modules/vulnerabilities/utils';

const calculatePluginRiskExposure = (pluginInfo) => {
    const {
        vulnerability_information: vulnInfo,
        risk_information: riskInfo
    } = pluginInfo;

    const risks = [
        // TODO use constants
        { key: 'isExploitedByMalware', valid: isRiskExploitedByMalware(vulnInfo) },
        { key: 'isRemotelyExploitable', valid: isRiskRemotelyExploitable(riskInfo) },
        { key: 'isLocallyExploitable', valid: isRiskLocallyExploitable(riskInfo) },
        { key: 'isCanvasExploitFramework', valid: isRiskCanvasExploitFramework(vulnInfo) },
        { key: 'isHighAttackComplexity', valid: isRiskHighAttackComplexity(riskInfo) },
        { key: 'isLowAttackComplexity', valid: isRiskLowAttackComplexity(riskInfo) },
        { key: 'isInTheNews', valid: isRiskInTheNews(vulnInfo) },
        { key: 'isEasyToUse', valid: isRiskEasyToUse(riskInfo) },
        { key: 'isFunctional', valid: isRiskFunctional(riskInfo) },
        { key: 'isProofOfConcept', valid: isRiskProofOfConcept(riskInfo) }
    ];

    return risks.filter((risk) => {
        return risk.valid;
    });
};

const getPluginInfo = (state = {}) => {
    return state[BRANCH_NAME][STEM_NAME].pluginInfo;
};

export const selectPluginInfoRiskExposure = createSelector(
    [getPluginInfo], calculatePluginRiskExposure
);
