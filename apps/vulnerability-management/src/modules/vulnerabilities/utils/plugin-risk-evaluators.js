import { evaluateBooleanProps, evaluateStringProps } from 'tio-vm/modules/common/utils';

const isRiskExploitedByMalware = (pluginVulnInfo) => {
    return evaluateBooleanProps('exploited_by_malware', pluginVulnInfo);
};

const isRiskRemotelyExploitable = (pluginRiskInfo) => {
    return evaluateStringProps('cvss_vector', ['AV:N', 'AV:A'], pluginRiskInfo);
};

const isRiskLocallyExploitable = (pluginRiskInfo) => {
    return evaluateStringProps('cvss_vector', ['AV:L'], pluginRiskInfo);
};

const isRiskCanvasExploitFramework = (pluginVulnInfo) => {
    const value = evaluateBooleanProps('exploit_frameworks', pluginVulnInfo);

    return Array.isArray(value) && value.filter(exploit => {
        return exploit.name === 'CANVAS';
    })[0];
};

const isRiskHighAttackComplexity = (pluginRiskInfo) => {
    return evaluateStringProps('cvss_vector', ['AC:H', 'AC:M'], pluginRiskInfo);
};

const isRiskLowAttackComplexity = (pluginRiskInfo) => {
    return evaluateStringProps('cvss_vector', ['AC:L'], pluginRiskInfo);
};

const isRiskInTheNews = (pluginVulnInfo) => {
    return evaluateBooleanProps('in_the_news', pluginVulnInfo);
};

const isRiskEasyToUse = (pluginRiskInfo) => {
    return evaluateStringProps('cvss_temporal_vector', ['E:H'], pluginRiskInfo);
};

const isRiskFunctional = (pluginRiskInfo) => {
    return evaluateStringProps('cvss_temporal_vector', ['E:F'], pluginRiskInfo);
};

const isRiskProofOfConcept = (pluginRiskInfo) => {
    return evaluateStringProps('cvss_temporal_vector', ['E:POC'], pluginRiskInfo);
};

export {
    isRiskExploitedByMalware,
    isRiskRemotelyExploitable,
    isRiskLocallyExploitable,
    isRiskCanvasExploitFramework,
    isRiskHighAttackComplexity,
    isRiskLowAttackComplexity,
    isRiskInTheNews,
    isRiskEasyToUse,
    isRiskFunctional,
    isRiskProofOfConcept
};
