import React from 'react';
import PropTypes from 'prop-types';
import { colors } from '@hivekit/core';

import { AssetInfoContainer } from 'tio-vm/modules/assets/components/containers';
import { AssetOverviewView } from 'tio-vm/modules/assets/components/presentations';

// TODO: label translations
const overviewWidgetStats = [
    {
        label: 'Critical',
        linecolor: colors.statusRed
    },
    {
        label: 'High',
        linecolor: colors.statusOrange
    },
    {
        label: 'Medium',
        linecolor: colors.statusYellow
    },
    {
        label: 'Low',
        linecolor: colors.statusGreen
    }
];

const getFilteredSeverities = (severities) => {
    return severities.filter((severity) => {
        return severity.level !== 0;
    });
};

const getTotalCounts = (severities) => {
    return severities.reduce((total, severityCount) => {
        return total + severityCount.count;
    }, 0);
};

const getStats = (assetInfo) => {
    if (assetInfo && assetInfo.counts) {
        const { severities } = assetInfo.counts.vulnerabilities;
        const filteredSeverities = getFilteredSeverities(severities).reverse();
        const total = getTotalCounts(filteredSeverities);

        return overviewWidgetStats.map((stat, index) => {
            const value = filteredSeverities[index].count;

            return {
                ...stat,
                value,
                total
            };
        });
    }

    return overviewWidgetStats;
};

const renderAssetOverview = (assetInfoProps) => {
    return (
        <AssetOverviewView
            {...assetInfoProps}
            graphs={getStats(assetInfoProps.assetInfo)} />
    );
};

export const AssetOverviewComponent = (props) => {
    const { assetid } = props.match.params;

    return (
        <AssetInfoContainer
            {...props}
            assetId={assetid}
            isOverview
            tioRender={renderAssetOverview} />
    );
};

AssetOverviewComponent.propTypes = {
    match: PropTypes.object.isRequired
};
