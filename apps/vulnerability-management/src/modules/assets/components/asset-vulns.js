import React from 'react';
import PropTypes from 'prop-types';

import {
    AdvSearchView,
    LayoutSearchTableView
} from 'tio-vm/modules/common/components/presentations';
import {
    AssetVulnsContainer,
    SearchFiltersContainer
} from 'tio-vm/modules/assets/components/containers';
import {
    AssetVulnsTableView
} from 'tio-vm/modules/assets/components/presentations';
import {
    AssetVulnsStatsComponent
} from 'tio-vm/modules/assets/components/';

export class AssetVulnsComponent extends React.Component {
    static propTypes = {
        match: PropTypes.object.isRequired,
        history: PropTypes.object.isRequired
    };

    constructor () {
        super();
        this.renderAssetVulns = this.renderAssetVulns.bind(this);
    }

    renderAdvancedSearch ({ fetchAssetVulns, ...filterProps }) {
        const {
            assetVulnsTotal,
            assetId,
            filtersApplied,
            filterRange
        } = filterProps;

        /**
         * TODO: Pass in instance filters instead of filters from top level after getting proper endpoint data
         *       Currently, we are getting plugins instead of instances from the endpoint.
         *       However, we want to display instances eventually.
         *       For now, we are passing filters from top level to accommdate with the current endpoint data
         */
        // TODO create fn(filters) and memoize
        // const validInstanceFilters = filters.filter((filter) => {
        //     return [
        //         'host.id',
        //         'host.target',
        //         'output',
        //         'port.port',
        //         'port.protocol',
        //         'modification',
        //         'severity',
        //         // 'target.group',
        //         'tracking.state'
        //     ].indexOf(filter.name) > -1;
        // });

        // TODO intl - Vulnerabilities
        return (
            <AdvSearchView
                {...filterProps}
                filtersApplied={filtersApplied}
                recordCount={assetVulnsTotal.toString()}
                defaultField='plugin.name'
                recordLabel='Vulnerabilities'
                searchAction={fetchAssetVulns.bind(null, assetId, filterRange)} />
        );
    }

    renderAssetVulns (assetVulnsProps) {
        return (
            <React.Fragment>
                <AssetVulnsStatsComponent />
                <LayoutSearchTableView headerHeight={42}
                    search={
                        <SearchFiltersContainer
                            {...assetVulnsProps}
                            filterType='vulnerabilities'
                            tioRender={this.renderAdvancedSearch} />
                    }
                    table={
                        <AssetVulnsTableView
                            {...assetVulnsProps} />
                    } />
            </React.Fragment>
        );
    }

    render () {
        return (
            <AssetVulnsContainer
                {...this.props}
                assetId={this.props.match.params.assetid}
                tioRender={this.renderAssetVulns} />
        );
    }
}
