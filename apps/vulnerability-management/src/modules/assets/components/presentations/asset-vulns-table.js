import React from 'react';
import PropTypes from 'prop-types';
import { injectIntl } from 'react-intl';
import { Table } from '@hivekit/table';

import { CellSeverityIcon, CellVulnStateIcon } from 'tio-vm/modules/common/components/presentations';
import { commonMessages } from 'tio-vm/modules/common/messages';
import { PluginTableActionsView } from 'tio-vm/modules/vulnerabilities/components/presentations';

const {
    name,
    // port,
    // lastSeen,
    // patchPublishedShort,
    // exploitability,
    state,
    // age
    family,
    vulnerabilities
} = commonMessages;

const checkboxColumn = {
    field: 'recastedSeverity',
    sort: 'desc'
};

const getColumns = (intl) => {
    const columns = [
        {
            headerName: intl.formatMessage(name),
            field: 'plugin_name',
            width: 350,
            cellTooltip: (data) => { return `Plugin ID: ${data.plugin_id}`; }
        },
        // TODO: integrate with the endpoint data
        /*
        {
            headerName: intl.formatMessage(port),
            field: '',
            width: 200
        },
        {
            headerName: intl.formatMessage(lastSeen),
            field: '',
            width: 200
        },
        {
            headerName: intl.formatMessage(patchPublishedShort),
            field: '',
            width: 200
        },
        {
            headerName: intl.formatMessage(exploitability),
            field: '',
            width: 200
        },
        */
        {
            headerName: intl.formatMessage(family),
            field: 'plugin_family'
        },
        {
            headerName: intl.formatMessage(state),
            field: 'vulnerability_state',
            width: 100,
            customCellRenderer: CellVulnStateIcon
        },
        {
            headerName: intl.formatMessage(vulnerabilities),
            field: 'count',
            width: 150,
            sort: 'desc'
        },
        {
            headerName: '',
            field: 'actions',
            width: 150,
            suppressSorting: true,
            customCellRenderer: PluginTableActionsView
        }
    ];

    return columns;
};

const AssetVulnsTable = ({ assetVulns, assetVulnsFetching, intl, ...restProps }) => {
    return (
        <Table
            inheritHeight
            densityToggle={false}
            columns={getColumns(intl)}
            rows={assetVulns}
            checkboxIconComponent={CellSeverityIcon}
            checkboxProps={checkboxColumn}
            fetching={assetVulnsFetching}
            {...restProps} />
    );
};
AssetVulnsTable.propTypes = {
    intl: PropTypes.object,
    assetVulns: PropTypes.array.isRequired,
    assetVulnsFetching: PropTypes.bool.isRequired
};

export const AssetVulnsTableView = injectIntl(AssetVulnsTable);
