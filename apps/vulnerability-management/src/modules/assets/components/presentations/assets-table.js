import React from 'react';
import PropTypes from 'prop-types';
import { Table } from '@hivekit/table';
import { AssetGenericIcon } from '@hivekit/icon';

import { Utils } from 'tio-alloy';
import {
    assetIp,
    assetIpTip,
    assetLastSeenTip,
    assetName,
    assetNameTip,
    assetOsTip
} from 'tio-vm/modules/assets/utils';

import { AssetTableActionsView } from './asset-actions';
import { CellSourceIcon } from './source-icon';

const { dateFormat } = Utils;

// TODO intl - columns
const columns = [
    {
        headerName: 'name',
        field: 'agent_name&netbios_name&fqdn&ipv4&ipv6',
        width: 300,
        valueGetter: (params) => {
            return assetName(params.data);
        },
        cellTooltip: assetNameTip,
        sort: 'asc'
    },
    {
        headerName: 'ip',
        field: 'ipv4',
        width: 200,
        valueGetter: (params) => {
            return assetIp(params.data);
        },
        cellTooltip: assetIpTip
    },
    {
        headerName: 'os',
        field: 'operating_system',
        width: 600,
        valueGetter: (params) => {
            return params.data.operating_system[0] || '';
        },
        cellTooltip: assetOsTip
    },
    {
        headerName: 'last seen',
        field: 'last_seen',
        width: 200,
        valueGetter: (params) => {
            return dateFormat(params.data.last_seen);
        },
        cellTooltip: assetLastSeenTip
    },
    /*
    {
        headerName: 'next scan',
        field: 'last_seen',
        width: 100,
        // this should work but it doesnt, the formatted value is returned
        valueFormatter: (params) => {
            return dateFormat(params.value);
        }
    },
    */
    {
        headerName: 'source',
        field: 'sources',
        width: 100,
        customCellRenderer: CellSourceIcon
    },
    {
        headerName: '',
        field: 'actions',
        customCellRenderer: AssetTableActionsView
    }
];

export const AssetsTableView = ({ assets, assetsFetching, ...restProps }) => {
    return (
        <Table
            inheritHeight
            densityToggle={false}
            columns={columns}
            rows={assets}
            fetching={assetsFetching}
            checkboxIconComponent={AssetGenericIcon}
            {...restProps} />
    );
};
AssetsTableView.propTypes = {
    assets: PropTypes.array.isRequired,
    assetsFetching: PropTypes.bool.isRequired
};
