import React from 'react';
import PropTypes from 'prop-types';
import { PlanePreviewAttrGraphic } from '@hivekit/plane';
import { LockOpenIcon, VulnerabilitiesIcon } from '@hivekit/icon';
import { colors } from '@hivekit/core';
import { Flex, Box } from '@hivekit/layout';
// import { FormattedMessage, injectIntl } from 'react-intl';

// TODO intl
const assetIcons = [
    {
        desc: 'VULNERABILITIES',
        Icon: VulnerabilitiesIcon,
        getLabel: (data) => {
            try {
                return data.counts.vulnerabilities.severities.reduce((total, severityCount) => {
                    const count = severityCount.level === 0
                        ? 0
                        : severityCount.count;

                    return total + count;
                }, 0);
            } catch (ex) {
                return null;
            }
        },
        color: colors.grayDark
    },
    {
        desc: 'EXPLOITABLE',
        Icon: LockOpenIcon,
        getLabel: (data) => {
            try {
                return data.assetExploitability;
            } catch (ex) {
                return null;
            }
        },
        color: colors.statusYellow
    }
];

const GraphIcon = ({ data, clickEvent, icon: { desc, Icon, getLabel, color } }) => {
    return (
        <Box width={0.5}>
            <PlanePreviewAttrGraphic
                label={`${getLabel(data) || '0'}`}
                icon={<Icon />}
                onClick={clickEvent}
                description={desc}
                iconColor={color} />
        </Box>
    );
};
GraphIcon.propTypes = {
    data: PropTypes.any.isRequired,
    clickEvent: PropTypes.func,
    icon: PropTypes.object.isRequired
};

// TODO optimize with shouldComponentUpdate
export const AssetGraphiconsView = ({ assetInfo, assetExploitability, clickEvent }) => {
    return (
        <Flex
            width='auto'
            height='auto'
            overflow='hidden'>
            {
                assetIcons.map((icon, index) => {
                    return (
                        <GraphIcon
                            key={index}
                            icon={icon}
                            data={{ ...assetInfo, assetExploitability }}
                            clickEvent={clickEvent} />
                    );
                })
            }
        </Flex>
    );
};
AssetGraphiconsView.propTypes = {
    assetExploitability: PropTypes.number.isRequired,
    assetInfo: PropTypes.object.isRequired,
    clickEvent: PropTypes.func
};
