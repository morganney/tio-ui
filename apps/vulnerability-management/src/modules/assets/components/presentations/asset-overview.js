import React from 'react';
import PropTypes from 'prop-types';
import { injectIntl } from 'react-intl';
import { colors } from '@hivekit/core';
import { Flex, Box } from '@hivekit/layout';
import { Text } from '@hivekit/text';

import { commonMessages } from 'tio-vm/modules/common/messages';
import { GraphBarView } from 'tio-vm/modules/common/components/presentations';

const {
    dnsEntries,
    ipv6Addresses,
    macAddresses,
    sshFingerprint,
    tenableUUID,
    none
} = commonMessages;

const renderTextSize1 = (text, index) => {
    return <Text key={index} size={1}>{text}</Text>;
};

const renderAttributeItemTextContent = (prop, noneText) => {
    return prop && prop.length ? prop.map(renderTextSize1) : renderTextSize1(noneText);
};

// this is a temp func for display attribute items
const renderAttributeItem = (label, prop, noneText) => {
    return (
        <Box
            width={ 0.5 }
            px='0px'
            py={1}>
            <Text
                color={colors.gray}
                size={0}>
                {label}
            </Text>
            {renderAttributeItemTextContent(prop, noneText)}
        </Box>
    );
};

const AssetOverview = (props) => {
    const { assetInfo, intl, graphs } = props;
    const noneText = intl.formatMessage(none);

    // TODO: integrate with new component to display attribute items
    return (
        <React.Fragment>
            <Box ml={4} mr={4} mt={3} mb={3}>
                <GraphBarView
                    graphs={graphs}
                    version='light' />
            </Box>
            <Flex ml={4} mr={4}>
                {renderAttributeItem(intl.formatMessage(ipv6Addresses), assetInfo.ipv6, noneText)}
                {renderAttributeItem(intl.formatMessage(dnsEntries), assetInfo.fqdn, noneText)}
                {renderAttributeItem(intl.formatMessage(macAddresses), assetInfo.mac_address, noneText)}
                {renderAttributeItem(intl.formatMessage(sshFingerprint), assetInfo.ssh_fingerprint, noneText)}
                {renderAttributeItem(intl.formatMessage(tenableUUID), assetInfo.tenable_uuid, noneText)}
            </Flex>
        </React.Fragment>
    );
};

AssetOverview.propTypes = {
    assetInfo: PropTypes.object.isRequired,
    intl: PropTypes.object.isRequired,
    graphs: PropTypes.array
};

export const AssetOverviewView = injectIntl(AssetOverview);
