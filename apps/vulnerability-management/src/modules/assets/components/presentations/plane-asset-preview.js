import React from 'react';
import PropTypes from 'prop-types';
import { Route, Switch } from 'react-router-dom';
import { Plane } from '@hivekit/plane';

import { routeClose } from 'tio-vm/modules/common/utils';
import {
    PLANE_FULL,
    PLANE_COVER,
    PLANE_PREVIEW,
    ROUTE_DETAIL,
    ROUTE_ASSET_BASE,
    ROUTE_VULN_PREVIEW_INSTANCE
} from 'tio-vm/constants';
import {
    AssetAgentView,
    AssetActivityView
} from 'tio-vm/modules/assets/components/presentations';
import {
    AssetOverviewComponent,
    AssetPreviewComponent,
    AssetVulnsComponent
} from 'tio-vm/modules/assets/components';
import {
    NavHeaderView
} from 'tio-vm/modules/common/components/presentations';

export class PlaneAssetPreviewView extends React.Component {
    static propTypes = {
        match: PropTypes.object.isRequired,
        history: PropTypes.object.isRequired
    }

    constructor () {
        super();
        this.navTabs = [
            { title: 'Overview', path: 'overview' },
            { title: 'Vulnerabilities', path: 'vulnerabilities' },
            { title: 'Agent', path: 'agent' },
            { title: 'Activity', path: 'activity' }
        ];
        this.onPlaneClose = this.onPlaneClose.bind(this);
        this.onPlaneChange = this.onPlaneChange.bind(this);
        this.renderPreview = this.renderPreview.bind(this);
        this.renderDetail = this.renderDetail.bind(this);
        this.showDetails = this.showDetails.bind(this);
    }

    onPlaneClose () {
        const { match } = this.props;
        const baseRoute = match.url.match(ROUTE_ASSET_BASE)
            ? ROUTE_ASSET_BASE
            : ROUTE_VULN_PREVIEW_INSTANCE;

        routeClose(
            baseRoute,
            this.props,
            match.url.match(baseRoute)[0].length
        );
    }

    onPlaneChange (planeState) {
        // TODO -- route overwrite previous plane with asset flow

        const { match, history } = this.props;
        // temporary double clauses, this is called twice on click
        if ((planeState === PLANE_FULL || planeState === PLANE_COVER) && !match.params.detail) {
            history.push(`${match.url}/${ROUTE_DETAIL}/vulnerabilities`);
        }

        if (planeState === PLANE_PREVIEW && match.params.detail) {
            // probably a better way to do this
            const indexOfDetail = match.url.indexOf(`/${ROUTE_DETAIL}`);
            history.replace(`${match.url.substr(0, indexOfDetail)}`);
        }
    }

    showDetails () {
        const { match, history } = this.props;

        // this doesn't handle reclicks to bring user back to vulns tab
        // after we're already in the details plane
        if (!match.params.detail) {
            history.push(`${match.url}/${ROUTE_DETAIL}/vulnerabilities`);
        }
    }

    renderPreview () {
        const { assetid } = this.props.match.params;

        return (
            <AssetPreviewComponent
                assetId={assetid}
                onShowDetails={() => { return 0; }} />
        );
    }

    renderDetail () {
        const { match } = this.props;

        // TODO return null, if not details route
        // TODO use a default path

        return (
            <React.Fragment>
                <NavHeaderView nav={this.navTabs} />
                <Switch>
                    <Route path={`${match.path}/overview`} component={AssetOverviewComponent} />
                    <Route path={`${match.path}/vulnerabilities`} component={AssetVulnsComponent} />
                    <Route path={`${match.path}/agent`} component={AssetAgentView} />
                    <Route path={`${match.path}/activity`} component={AssetActivityView} />
                </Switch>
            </React.Fragment>
        );
    }

    render () {
        const { match } = this.props;
        // quick fix for route, TODO better test - match.url.match(/asset\//)

        return (
            <Plane
                closePlane={this.onPlaneClose}
                onChange={this.onPlaneChange}
                display={match.params.detail !== ROUTE_DETAIL || match.url.match(/asset\//)
                    ? PLANE_PREVIEW
                    : PLANE_FULL}
                preview={this.renderPreview}>
            </Plane>
        );
    }
}
