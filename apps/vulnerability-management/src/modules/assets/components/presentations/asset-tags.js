// TODO pull generic tag display stuff into a separate Views
import React from 'react';
import PropTypes from 'prop-types';
import { Tag } from '@hivekit/tag';
import { TagIcon, TagWithFillIcon } from '@hivekit/icon';
import { H5 } from '@hivekit/header';
import { Link } from '@hivekit/link';
// we need a stable sort and javascript std lib does not have one
import sortBy from 'lodash/sortBy';

const DYNAMIC_TAG = 'dynamic';
const iconMargins = { mb: 1, mr: 1 };
const renderTag = ({ tag_key: tagKey, tag_value: tagValue, source }, index) => {
    return (
        <Tag key={index} style={{ border: 'none', marginRight: 4, marginBottom: 4, paddingRight: 8, fontSize: 12 }}>
            <React.Fragment>
                { source === DYNAMIC_TAG
                    ? <TagWithFillIcon {...iconMargins} />
                    : <TagIcon {...iconMargins} /> }
                {`${tagKey}: ${tagValue}`}
            </React.Fragment>
        </Tag>
    );
};
renderTag.propTypes = {
    tag_key: PropTypes.string.isRequired,
    tag_value: PropTypes.string.isRequired,
    source: PropTypes.string
};

const sortByValue = (tag) => {
    return tag.tag_value.toLowerCase();
};
const sortByKey = (tag) => {
    return tag.tag_key.toLowerCase();
};
const sortByOwnLoc = (tag) => {
    if (tag.tag_key.toLowerCase() === 'owner') {
        return -1;
    }

    if (tag.tag_key.toLowerCase() === 'location') {
        return 0;
    }

    return 1;
};

export const AssetTagsView = ({ tags = [], maxVisibleTags = 9 }) => {
    // TODO look into lodash/fp a sortedTags = compose(sortByValue, sortByKey, sortByOwnLoc) would be nice here
    const valueAlphaTags = sortBy(tags, sortByValue);
    const keyAlphaTags = sortBy(valueAlphaTags, sortByKey);
    const sortedTags = sortBy(keyAlphaTags, sortByOwnLoc);
    const visibleTags = sortedTags.slice(0, maxVisibleTags);
    const restTags = sortedTags.slice(maxVisibleTags);

    return (
        <React.Fragment>
            <div style={{ margin: '8px 0' }}>
                <H5 style={{ display: 'inline' }}>Tags</H5>
            </div>
            <div>
                { visibleTags.length > 0 &&
                  visibleTags.map(renderTag) }
            </div>
            <div>
                { restTags.length > 0 &&
                  <Link size={0} to='#'>{`+ ${restTags.length} More`}</Link> }
            </div>
        </React.Fragment>
    );
};
AssetTagsView.propTypes = {
    maxVisibleTags: PropTypes.number,
    tags: PropTypes.array
};
