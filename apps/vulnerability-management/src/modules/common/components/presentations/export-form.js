import React from 'react';
import PropTypes from 'prop-types';
import { Text } from '@hivekit/text';
import { ExportIcon, MoreIcon } from '@hivekit/icon';
import { Button } from '@hivekit/button';
import { Menu, MenuItem } from '@hivekit/menu';
import { PlanePreviewAttrGraphic } from '@hivekit/plane';
import { Popover } from '@hivekit/popover';
import { colors } from '@hivekit/core';
import { Divider } from '@hivekit/divider';

const exportOptions = ['PDF', 'HTML', 'Nessus', 'CSV'];
const chapterOptions = [
    { name: 'Current', type: 'vuln_by_plugin' },
    { name: 'Executive Summary', type: 'exec_summary' }
];

const ExportButton = ({ data, format, chapter, option, startExportFile, density, pluginId }) => {
    const getExport = () => {
        const ids = [];
        const filePluginId = data.plugin_id || data.pluginId || pluginId;
        const fileDetails = {
            format: format.toLowerCase(),
            report: 'vulnerabilities',
            chapter
        };

        if (filePluginId) {
            const pluginDetails = {
                type: 'plugin_id',
                value: filePluginId
            };

            ids.push(pluginDetails);
        }

        // For the individual assets plane
        if (data.uuid) {
            const assetDetails = {
                type: 'asset_id',
                value: data.uuid
            };

            ids.push(assetDetails);

            if (fileDetails.chapter === 'vuln_by_plugin') {
                fileDetails.chapter = 'vuln_by_asset';
            }
        }

        fileDetails.ids = ids;

        startExportFile(fileDetails);
    };

    return (
        <MenuItem onClick={getExport} density={density}>
            {option}
        </MenuItem>
    );
};
ExportButton.propTypes = {
    data: PropTypes.object.isRequired,
    format: PropTypes.string.isRequired,
    startExportFile: PropTypes.func.isRequired,
    option: PropTypes.string.isRequired,

    // optional
    chapter: PropTypes.string,
    density: PropTypes.string,
    pluginId: PropTypes.string
};

const renderMoreIcon = (index, option, props) => {
    return (
        <React.Fragment>
            <Button
                data-popover=''
                data-for={`vuln-export-button-menu-popover-id-${index}`}
                mr={1}>
                <MoreIcon />
            </Button>
            <Popover
                id={`vuln-export-button-menu-popover-id-${index}`}
                p='0'
                place='bottom'>
                <Menu density='small'>
                    {chapterOptions.map((chapter) => {
                        return (
                            <ExportButton
                                {...props}
                                key={`${option}${chapter.name}`}
                                chapter={chapter.type}
                                density='small'
                                format={option}
                                option={chapter.name} />
                        );
                    })}
                </Menu>
            </Popover>
        </React.Fragment>
    );
};

const createMenuEntries = (props) => {
    return exportOptions.map((option, index) => {
        if (option === 'PDF' || option === 'HTML') {
            const itemProps = {
                ...props,
                button: renderMoreIcon(index, option, props)
            };

            return (
                <MenuItem {...itemProps} key={`${index}-${option}}`}>
                    {option}
                </MenuItem>
            );
        }

        const buttonProps = {
            ...props,
            format: option,
            option
        };

        return (
            <ExportButton {...buttonProps} key={`${option}-${index}`} />
        );
    });
};

// TODO intl - [FORMATS]
export const ExportFormView = (props) => {
    return (
        <div>
            <PlanePreviewAttrGraphic
                label='Exports'
                description=''
                icon={<ExportIcon />}
                iconColor={colors.base} />
            <Text
                size={0}
                ml={1}
                mt={3}
                mb={2}
                color={colors.gray}>
                FORMATS
            </Text>
            <Divider />
            <Menu>
                {createMenuEntries(props)}
            </Menu>
            <Divider />
        </div>
    );
};
