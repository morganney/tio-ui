import React from 'react';
import PropTypes from 'prop-types';
import { AdvancedSearch } from '@hivekit/advanced-search';

import { Utils } from 'tio-alloy';
import {
    getFilterParams,
    formatFiltersApplied
} from 'tio-vm/modules/common/utils/adv-search';

const { dateFormatStrings: { DATE_FORMAT_YEAR_MONTH_DAY } } = Utils;

export class AdvSearchView extends React.Component {
    static propTypes = {
        defaultField: PropTypes.string.isRequired,
        filters: PropTypes.array.isRequired,
        recordCount: PropTypes.string.isRequired,
        recordLabel: PropTypes.string.isRequired,
        searchAction: PropTypes.func.isRequired,
        // optionals
        filtersApplied: PropTypes.object,
        updateFiltersApplied: PropTypes.func
    }

    constructor () {
        super();
        this.search = this.search.bind(this);
        this.clearFilters = this.clearFilters.bind(this);
    }

    search (query) {
        const filterParams = getFilterParams(query, this.props.defaultField);

        this.props.searchAction(filterParams);
        if (this.props.updateFiltersApplied) {
            this.props.updateFiltersApplied(query);
        }
    }

    clearFilters () {
        if (this.props.updateFiltersApplied) {
            this.props.updateFiltersApplied({});
        }
    }

    render () {
        const { filters, filtersApplied, recordCount, recordLabel, ...restProps } = this.props;
        const filtersAppliedFormatted = formatFiltersApplied(filtersApplied);

        return (
            <AdvancedSearch legacy
                onSubmit={this.search}
                onCancel={this.clearFilters}
                onClearFilters={this.clearFilters}
                dateFormat={DATE_FORMAT_YEAR_MONTH_DAY}
                filterOptions={filters}
                filterItems={filtersAppliedFormatted}
                labelKey='readable_name'
                recordLabel={recordLabel}
                recordCount={recordCount}
                {...restProps} />
        );
    }
}
