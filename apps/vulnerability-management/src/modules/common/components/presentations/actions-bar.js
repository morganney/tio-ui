import React from 'react';
import PropTypes from 'prop-types';
import { Button } from '@hivekit/button';
import { Cell } from '@hivekit/table';
import { Popover } from '@hivekit/popover';
import { Menu, MenuItem } from '@hivekit/menu';
import { MoreIcon } from '@hivekit/icon';
import { Text } from '@hivekit/text';

const actionButtonPropTypes = {
    click: PropTypes.func.isRequired,
    Icon: PropTypes.func.isRequired,
    title: PropTypes.string.isRequired
};
const actionsPropTypes =
    PropTypes.arrayOf(
        PropTypes.shape(actionButtonPropTypes)
    ).isRequired;
const actionPropTypes = {
    ...actionButtonPropTypes,
    updatePlaneAction: PropTypes.func.isRequired,
    data: PropTypes.object.isRequired,
    node: PropTypes.object
};

const ActionButton = ({ click, Icon, title, data, node, updatePlaneAction }) => {
    const doClick = (event) => {
        click(event, { data, node, updatePlaneAction });
    };

    return (
        <Button data-tip={title} onClick={doClick} kind='action'>
            <Icon />
        </Button>
    );
};
ActionButton.propTypes = actionPropTypes;

const ActionMenu = ({ click, Icon, title, data, node, updatePlaneAction }) => {
    const doClick = (event) => {
        click(event, { data, node, updatePlaneAction });
    };

    return (
        <MenuItem onClick={doClick} kind='action' density='small'>
            <Icon />
            <Text ml={1}>
                {title}
            </Text>
        </MenuItem>
    );
};
ActionMenu.propTypes = actionPropTypes;

const ActionsBarView = ({ actions, id, data, node = {}, updatePlaneAction, maxVisibleActions = 4 }) => {
    const popoverId = `popover${id}`;
    const visibleActions = actions.length > maxVisibleActions
        ? actions.slice(0, maxVisibleActions - 1)
        : actions;
    const moreActions = actions.length > visibleActions.length
        ? actions.slice(maxVisibleActions - 1)
        : null;

    return (
        <React.Fragment>
            {
                visibleActions.map((action, idx) => {
                    return (<ActionButton
                        {...action}
                        key={idx}
                        node={node}
                        data={data}
                        updatePlaneAction={updatePlaneAction} />
                    );
                })
            }
            {
                moreActions &&
                <React.Fragment>
                    <Button
                        kind='action'
                        data-popover=''
                        data-for={popoverId}>
                        <MoreIcon />
                    </Button>
                    <Popover id={popoverId} p={0}>
                        <Menu density='small'>
                            {
                                moreActions.map((action, idx) => {
                                    return (
                                        <ActionMenu
                                            {...action}
                                            key={idx}
                                            node={node}
                                            data={data}
                                            updatePlaneAction={updatePlaneAction} />
                                    );
                                })
                            }
                        </Menu>
                    </Popover>
                </React.Fragment>
            }
        </React.Fragment>
    );
};
ActionsBarView.propTypes = {
    id: PropTypes.string.isRequired,
    node: PropTypes.object,
    data: PropTypes.any.isRequired,
    actions: actionsPropTypes,
    maxVisibleActions: PropTypes.number,
    updatePlaneAction: PropTypes.func.isRequired
};

const TableActionsBarView = ({ actions, idKey, node, data, ...props }) => {
    return (
        <Cell {...props}>
            <ActionsBarView
                {...props}
                actions={actions}
                id={node.data[idKey] || ''}
                node={node}
                data={ { ...data, ...node.data }} />
        </Cell>
    );
};
TableActionsBarView.propTypes = {
    actions: actionsPropTypes,
    // ag-grid supplied property for customCellRenderers
    node: PropTypes.object.isRequired,
    idKey: PropTypes.string.isRequired,
    // action creators, opens action plane
    updatePlaneAction: PropTypes.func.isRequired,
    data: PropTypes.object
};

export {
    ActionsBarView,
    TableActionsBarView
};
