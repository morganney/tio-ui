import React from 'react';
import PropTypes from 'prop-types';
import { AdvancedSearch } from '@hivekit/advanced-search';
import { Link } from '@hivekit/link';
import { Text } from '@hivekit/text';
import { colors } from '@hivekit/core';
import { PlaceholderIcon, StateFixedIcon } from '@hivekit/icon';
import { Table, Cell } from '@hivekit/table';

const CheckCircleIcon = (data) => {
    return (
        <Cell>
            {
                data.node.selected
                    ? <StateFixedIcon size={0} color={colors.statusGreen} />
                    : <PlaceholderIcon size={0} />
            }
        </Cell>
    );
};
const checkColumn = {
    customCellRenderer: CheckCircleIcon,
    width: 32
};

export class FilteredList extends React.Component {
    static propTypes = {
        title: PropTypes.string.isRequired,
        rows: PropTypes.array.isRequired,
        columns: PropTypes.array.isRequired
    };

    constructor (props) {
        super(props);
        this.columns = [...this.props.columns, checkColumn];
        this.textProps = {
            color: colors.grayDark,
            display: 'inline'
        };

        this.getGridApi = this.getGridApi.bind(this);
        this.clearSelected = this.clearSelected.bind(this);
        this.selectRecord = this.selectRecord.bind(this);
        this.search = this.search.bind(this);
    }

    getGridApi (gridApi) {
        this.gridApi = gridApi;
    }

    clearSelected () {
        this.gridApi.deselectAll();
        this.gridApi.redrawRows();
        this.forceUpdate();
    }

    selectRecord (data) {
        data.node.setSelected(!data.node.selected);
        this.gridApi.redrawRows({ rowNodes: [data.node] });
        this.forceUpdate();
    }

    search (query) {
        this.gridApi.setQuickFilter(query.search);
    }

    render () {
        const { title, rows } = this.props;
        const selectedCount = this.gridApi ? this.gridApi.getSelectedRows().length : 0;

        return (
            <div>
                <Text size={1} {...this.textProps}>{title}</Text>
                {
                    (selectedCount > 0) &&
                    <Text size={0} {...this.textProps} ml={1}>
                        ({selectedCount} Selected <Link onClick={this.clearSelected}>Clear All</Link>)
                    </Text>
                }
                <AdvancedSearch
                    mt={1}
                    mb={1}
                    recordCount=''
                    recordLabel=''
                    searchBarOnly={true}
                    onSubmit={this.search} />
                <div>
                    <Table
                        rows={rows}
                        columns={this.columns}
                        allowSelection={false}
                        showPagination={false}
                        setApi={this.getGridApi}
                        onCellClicked={this.selectRecord} />
                </div>
            </div>
        );
    }
}
