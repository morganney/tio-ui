// plane preview pattern implementation components
import React from 'react';
import PropTypes from 'prop-types';
import { colors, spacing, fontSizes } from '@hivekit/core';
import { Container, ClickableContainer } from '@hivekit/container';
import { Badge } from '@hivekit/badge';
import { Flex, Box } from '@hivekit/layout';
import { H4, H6 } from '@hivekit/header';
import { Text } from '@hivekit/text';

// TODO string compression with constant vars
const half = 0.5;

// http://hivedesignsystem.lab.tenablesecurity.com/hivekit/patterns/plane/plane-preview-attributes
const LayoutPreviewGraphicsView = ({ graphics }) => {
    return graphics.map((graphic, index) => {
        return (
            <Box key={index} width={graphic.width || half}>
                <ClickableContainer
                    py={0}
                    mb={0}
                    backgroundHoverColor={colors.actionBlueLight}
                    backgroundClickColor={colors.actionBlueSemiLight}
                    onClick={graphic.action}>
                    <Flex alignItems='center' flexWrap='nowrap'>
                        <Box mr='4px'>
                            <graphic.Icon size={1} color={graphic.color} />
                        </Box>
                        <Box>
                            <Flex flexDirection='column'>
                                <Box>
                                    <Text size={3} color={graphic.color}>
                                        {graphic.value}
                                    </Text>
                                </Box>
                                <Box>
                                    <Text size={0} color={colors.gray}>
                                        {graphic.title}
                                    </Text>
                                </Box>
                            </Flex>
                        </Box>
                    </Flex>
                </ClickableContainer>
            </Box>
        );
    });
};
const graphicPropTypes = {
    width: PropTypes.number.isRequired,
    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    description: PropTypes.isRequired,
    Icon: PropTypes.func.isRequired,
    color: PropTypes.string.isRequired,
    action: PropTypes.func
};
LayoutPreviewGraphicsView.propTypes = {
    graphics: PropTypes.arrayOf(
        PropTypes.shape(graphicPropTypes)
    ).isRequired
};

// http://hivedesignsystem.lab.tenablesecurity.com/hivekit/patterns/plane/plane-preview-attributes
const LayoutPreviewAttributesView = ({ attributes }) => {
    return (
        <React.Fragment>
            {
                attributes.map((attr, index) => {
                    return (
                        <React.Fragment key={index}>
                            <Box
                                width={attr.width || 1}
                                px={'0px'}
                                py={1}>
                                <H4>
                                    {attr.title}
                                </H4>
                            </Box>
                            <React.Fragment>
                                {
                                    !Array.isArray(attr.data)
                                        ? attr.data
                                        : attr.data.map((data, ndx) => {
                                            return (
                                                <Box
                                                    key={ndx}
                                                    width={data.width || half}
                                                    px={'0px'}
                                                    py={1}>
                                                    <Text
                                                        color={data.color || colors.gray}
                                                        size={0}>
                                                        {data.title}
                                                    </Text>
                                                    {
                                                        typeof data.value === 'string'
                                                            ? <Text size={1}>{data.value}</Text>
                                                            : data.value
                                                    }
                                                </Box>
                                            );
                                        })
                                }
                            </React.Fragment>
                        </React.Fragment>
                    );
                })
            }
        </React.Fragment>
    );
};
const attributePropTypes = {
    px: PropTypes.number,
    py: PropTypes.number,
    width: PropTypes.number,
    title: PropTypes.string.isRequired,
    value: PropTypes.oneOfType([
        PropTypes.node,
        PropTypes.string
    ]).isRequired,
    color: PropTypes.string
};
const attributeSectionPropTypes = {
    px: PropTypes.number,
    py: PropTypes.number,
    width: PropTypes.number,
    title: PropTypes.string.isRequired,
    data: PropTypes.oneOfType([
        PropTypes.node,
        PropTypes.arrayOf(PropTypes.shape(attributePropTypes))
    ]).isRequired
};
LayoutPreviewAttributesView.propTypes = {
    attributes: PropTypes.arrayOf(
        PropTypes.shape(attributeSectionPropTypes)
    ).isRequired
};

const LayoutPreviewContentView = ({ graphics, attributes }) => {
    return (
        <Flex
            width='auto'
            height='auto'
            overflow='hidden'>
            {
                graphics &&
                <LayoutPreviewGraphicsView graphics={graphics} />
            }
            {
                attributes &&
                <LayoutPreviewAttributesView attributes={attributes} />
            }
        </Flex>
    );
};
LayoutPreviewContentView.propTypes = {
    graphics: PropTypes.array,
    attributes: PropTypes.array
};

// http://hivedesignsystem.lab.tenablesecurity.com/hivekit/patterns/plane/plane-preview-actions
const LayoutPreviewActionsView = ({ actions }) => {
    return (
        <Container
            width='auto'
            borderTopColor={colors.grayLight}
            borderBottomColor={colors.grayLight}
            borderTopWidth='1px'
            borderBottomWidth='1px'>
            <Flex
                width='100%'
                align='center'>
                <Box p={1}>
                    <H6 color={colors.grayDark}>ACTIONS</H6>
                </Box>
                <Box
                    p={1}
                    ml='auto'>
                    <Flex>
                        {actions}
                    </Flex>
                </Box>
            </Flex>
        </Container>
    );
};
LayoutPreviewActionsView.propTypes = {
    actions: PropTypes.node.isRequired
};

// http://hivedesignsystem.lab.tenablesecurity.com/hivekit/patterns/plane/plane-preview-header
const LayoutPreviewHeaderView = ({ icon, badge, title }) => {
    return (
        <Flex
            width='100%'
            pb={spacing[2]}>
            <Box
                width='20%'
                pr='0px'
                pt='0px'>
                <Flex
                    alignItems='flex-start'
                    flexDirection='column'
                    justifyContent='center'
                    width='100%'>
                    <Box>
                        {icon}
                    </Box>
                    {
                        badge &&
                        <Badge
                            mt={1}
                            px='2px'
                            borderThickness='0px'
                            minWidth='51px'
                            backgroundColor={badge.color}
                            color={colors.white}
                            fontSize={0}
                            lineHeight={fontSizes[2]}>
                            {badge.label}
                        </Badge>
                    }
                </Flex>
            </Box>
            <Box width='80%' pt='0px'>
                {title}
            </Box>
        </Flex>
    );
};
LayoutPreviewHeaderView.propTypes = {
    badge: PropTypes.object,
    icon: PropTypes.node.isRequired,
    title: PropTypes.node.isRequired
};

const LayoutPreviewView = ({ header, actions, graphics, attributes }) => {
    return (
        <Flex
            width='100%'
            flexDirection='column'
            flexWrap='nowrap'>
            { header &&
                <Box
                    py={1}
                    width={1}>
                    <LayoutPreviewHeaderView {...header} />
                </Box>
            }
            { actions &&
                <Box
                    py={1}
                    width={1}>
                    <LayoutPreviewActionsView
                        actions={actions} />
                </Box>
            }
            { (graphics || attributes) &&
                <Box
                    py={1}
                    width={1}>
                    <Flex
                        width='auto'
                        height='auto'
                        overflow='hidden'>
                        <LayoutPreviewContentView
                            graphics={graphics}
                            attributes={attributes} />
                    </Flex>
                </Box>
            }
        </Flex>
    );
};
LayoutPreviewView.propTypes = {
    header: PropTypes.object,
    actions: PropTypes.oneOfType([PropTypes.node, PropTypes.array]),
    graphics: PropTypes.array,
    attributes: PropTypes.array
};

export {
    LayoutPreviewView,
    LayoutPreviewHeaderView,
    LayoutPreviewActionsView,
    LayoutPreviewContentView,
    LayoutPreviewGraphicsView,
    LayoutPreviewAttributesView
};
