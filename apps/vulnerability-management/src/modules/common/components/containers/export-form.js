import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';

import { BRANCH_NAME } from 'tio-vm/modules/common/constants';
import { STEM_NAME as VULN_STEM_NAME } from 'tio-vm/modules/vulnerabilities/constants';
import { AdvSearch } from 'tio-vm/modules/common/utils';
import { startExportFile } from 'tio-vm/modules/common/actions/thunks/start-export-file';

let exportStemName = VULN_STEM_NAME;

class ExportForm extends React.Component {
    static propTypes = {
        exportType: PropTypes.string.isRequired,
        node: PropTypes.object.isRequired,
        data: PropTypes.object.isRequired,
        filtersApplied: PropTypes.object,
        tioRender: PropTypes.func.isRequired
    };

    componentDidMount () {
        const { exportType } = this.props;
        exportStemName = exportType;
        this.combineExportFilters(this.getExportIDFilterFromCSV());
    }

    getExportIDFilterFromCSV () {
        const { exportType, node, data } = this.props;
        const filterName = (exportType === VULN_STEM_NAME) ? 'plugin.id' : 'asset.id';
        let csvIds = '';

        if (node && node.gridApi) {
            csvIds = node.gridApi.getSelectedRows().map(
                (row) => {
                    if (exportType === VULN_STEM_NAME) {
                        return row.plugin_id;
                    }

                    return row.asset_id;
                }).join(',');
        } else {
            csvIds = data.pluginId;
        }

        return csvIds.length === 0 ? [] : AdvSearch.createFilter(filterName, 'eq', csvIds);
    }

    combineExportFilters (filter) {
        const { filtersApplied: { filters }, exportType } = this.props;
        const idFilterName = (exportType === VULN_STEM_NAME) ? 'plugin.id' : 'asset.id';
        let originalFilters = [];

        if (filters) {
            originalFilters = filters.slice();
        }

        // Dedupe the id filter with selected item ids
        const combinedFilters = originalFilters.filter((flr) => {
            return flr.name !== idFilterName;
        });

        combinedFilters.push(filter);

        return combinedFilters;
    }

    render () {
        return this.props.tioRender(this.props);
    }
}

const mapStateToProps = (state) => {
    const { filtersApplied } = state[BRANCH_NAME][exportStemName];

    return {
        filtersApplied
    };
};

const mapDispatchToProps = {
    startExportFile
};

export const ExportFormContainer =
    connect(mapStateToProps, mapDispatchToProps)(ExportForm);
